AWSTemplateFormatVersion: 2010-09-09
#see https://thorntech.com/redshift-stack-aws-cloudformation/

# According to chatGPT:
# This CloudFormation template creates an Amazon Redshift cluster, an S3 data bucket, an IAM role, and an EC2 security group.
# The Redshift cluster is created with the properties specified, such as the subnet group, cluster type (determined by the value of the "SingleNode" condition), number of nodes, database name, IAM roles, master username and password, node type, port, and VPC security group. The cluster is also set to be publicly accessible and has a preferred maintenance window.
# The S3 data bucket is also created with the specified name.
# An IAM role and policy are created to give the Redshift cluster access to the data bucket. The role and policy allow actions such as "s3:Get*", "s3:List*", and cloudwatch actions.
# An EC2 security group is also created to enable the JDBC port and allow traffic from the specified developer IP address.
# Finally, parameters are defined for the subnets, VPC, data bucket name, database name, master username, master user password, and developer IP address.

# is this setup good enough this for production environments?
# This CloudFormation template creates a basic setup for an Amazon Redshift cluster, but there are additional considerations that should be taken into account for a production environment.
# Security: This template creates a security group that allows traffic from a specific IP address, but in a production environment, it is best practice to use security groups and network access control lists (ACLs) to restrict access to the Redshift cluster and data bucket to only authorized IP addresses or ranges. Also, the master user password is passed in plain text, but it is recommended to use something like Secrets Manager to store password securely.
# Scalability: This template creates a Redshift cluster with a fixed number of nodes, but in a production environment, you may need to scale the cluster up or down based on workloads. You may need to consider automatic scaling and self-healing in case of node failures.
# Backup and recovery: This template does not include any backup or recovery options, but in a production environment, it is best practice to have a disaster recovery plan and regularly backup the data in the Redshift cluster and S3 data bucket.
# Monitoring and logging: This template does not include any monitoring or logging options, but in a production environment, it is best practice to have monitoring and logging in place to quickly detect and troubleshoot issues.
# Compliance: This template does not include any compliance options, but in a production environment, you may need to consider compliance requirements such as HIPAA or SOC2 and implement necessary controls to meet those requirements.
# Overall, this template provides a good starting point for creating a Redshift cluster, but additional steps and considerations would be necessary to make it production-ready.

# is it okay that Redshift is in a VPC subnet (so that I can connect directly to it without setting up a VPN or proxy)?
# It is generally okay to have an Amazon Redshift cluster in a VPC subnet, as it allows you to connect to it directly without the need for a VPN or proxy. However, it is important to consider the security implications of placing a Redshift cluster in a VPC subnet.
# Network isolation: Placing a Redshift cluster in a VPC subnet can provide network isolation and help protect the cluster from external threats. However, it is important to properly configure security groups and network ACLs to ensure that only authorized IP addresses or ranges have access to the Redshift cluster.
# Data encryption: By default, data stored in an Amazon Redshift cluster is not encrypted. It is important to enable encryption at rest and in transit for the cluster and data bucket, to protect the data from unauthorized access.
# Network access: Connecting to a Redshift cluster in a VPC subnet requires that the client have access to the VPC network. This may require additional configuration or setup, such as setting up a VPN or Direct Connect.
# Compliance: Depending on the data stored in the Redshift cluster, certain compliance regulations may require that the data be stored in a specific environment or location. It is important to be aware of any compliance requirements and ensure that the Redshift cluster is configured to meet those requirements.
# Overall, placing an Amazon Redshift cluster in a VPC subnet can provide network isolation and simplify connectivity, but it is important to properly configure security and encryption, and ensure compliance with any relevant regulations.

Description: Redshift Stack 
Conditions:
  SingleNode: !Equals [ !Ref RedshiftNodeCount, 1 ]
Parameters:
  SubnetA:
    Type: String 
    Type: AWS::EC2::Subnet::Id
    Description: Make sure this belongs to the VPC specified below (e.g. 172.31.0.0/20)
  SubnetB:
    Type: String
    Type: AWS::EC2::Subnet::Id
    Description: Make sure this is different from the subnet above (e.g. 172.31.16.0/20)
  VPCID:
    Type: String
    Type: AWS::EC2::VPC::Id
    Description: Select a VPC (e.g. 172.31.0.0/16)
  DataBucketName:
    Type: String
    Description: S3 data bucket name 
  DatabaseName:
    Type: String
    Description: Database name 
  MasterUsername:
    Type: String
    Description: Master user name for Redshift 
    Default: admin
  MasterUserPassword:
    Type: String
    Description: Master password for Redshift (used mixed case and numbers)
    NoEcho: true 
  DeveloperIPAddress:
    Type: String 
    Description: Your public IP address (see http://checkip.dyndns.org/)
  RedshiftNodeCount:
    Type: Number
    Description: Number of Redshift nodes 
    Default: 1
    MinValue: 1
    ConstraintDescription: Must be a number greater or equal to 1
Resources:
  RedshiftCluster: 
    Type: AWS::Redshift::Cluster
    Properties: 
      ClusterSubnetGroupName: !Ref RedshiftClusterSubnetGroup
      ClusterType: !If [ SingleNode, single-node, multi-node ]  
      NumberOfNodes: !If [ SingleNode, !Ref 'AWS::NoValue', !Ref RedshiftNodeCount ] #'
      DBName: !Sub ${DatabaseName}
      IamRoles:
        - !GetAtt RawDataBucketAccessRole.Arn
      MasterUserPassword: !Ref MasterUserPassword
      MasterUsername: !Ref MasterUsername
      PubliclyAccessible: true
      NodeType: dc1.large
      Port: 5439
      VpcSecurityGroupIds: 
        - !Sub ${RedshiftSecurityGroup}
      PreferredMaintenanceWindow: Sun:09:15-Sun:09:45
  DataBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${DataBucketName}
  RawDataBucketAccessRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement: 
          - 
            Effect: Allow
            Principal:
              Service:
                - redshift.amazonaws.com
            Action:
              - sts:AssumeRole
  RawDataBucketRolePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: RawDataBucketRolePolicy
      PolicyDocument: 
        Version: 2012-10-17
        Statement:
          - 
            Effect: Allow
            Action: s3:ListAllMyBuckets
            Resource: arn:aws:s3:::*
          - 
            Effect: Allow
            Action: 
              - 's3:Get*'
              - 's3:List*'
            Resource: '*'
          - 
            Effect: Allow
            Action: cloudwatch:*
            Resource: "*"
      Roles:
        - !Ref RawDataBucketAccessRole  
  RedshiftClusterSubnetGroup: 
    Type: AWS::Redshift::ClusterSubnetGroup
    Properties: 
      Description: Cluster subnet group
      SubnetIds: 
        - !Ref SubnetA
        - !Ref SubnetB
  RedshiftSecurityGroup: 
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: Enable JDBC port
      VpcId: !Ref VPCID
      SecurityGroupIngress: 
        - 
          CidrIp: !Sub ${DeveloperIPAddress}/32 
          FromPort: 5439
          ToPort: 5439
          IpProtocol: tcp
          Description: IP address for your dev machine
        - 
          SourceSecurityGroupId: !Ref AccessToRedshiftSecurityGroup
          FromPort: 5439
          ToPort: 5439
          IpProtocol: tcp
          Description: Access to redshift  
  AccessToRedshiftSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to Redshift access
      VpcId: !Ref VPCID 
  InternalSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 0
      ToPort: 65535
      SourceSecurityGroupId: !Ref RedshiftSecurityGroup
      GroupId: !Ref RedshiftSecurityGroup
Outputs:
  RedshiftClusterEndpointAddress:
    Description: Redshift Cluster Endpoint Address 
    Value: !GetAtt RedshiftCluster.Endpoint.Address 
  RedshiftClusterEndpoint:
    Description: Redshift Cluster Endpoint
    Value:       
      Fn::Join:
        - ""
        - - 'jdbc:redshift://'
          - !GetAtt RedshiftCluster.Endpoint.Address 
          - ':5439/'
          - !Sub ${DatabaseName}